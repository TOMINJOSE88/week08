name: CD - Deploy Backend Services to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
      aks_acr_name:
        description: 'Name of Azure Container Registry (ACR)'
        required: true

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production
    
    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP: ${{ steps.get_order_ip.outputs.external_ip }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Azure login with Service Principal secret
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Get AKS credentials to interact with the cluster
      - name: Set Kubernetes context
        run: |
          az aks get-credentials \
            --resource-group ${{ github.event.inputs.aks_resource_group }} \
            --name ${{ github.event.inputs.aks_cluster_name }} \
            --overwrite-existing

      # Attach ACR (if not already attached)
      - name: Attach ACR to AKS
        run: |
          echo "Attaching ACR to AKS cluster..."
          az aks update \
            --name ${{ github.event.inputs.aks_cluster_name }} \
            --resource-group ${{ github.event.inputs.aks_resource_group }} \
            --attach-acr ${{ github.event.inputs.aks_acr_name }}

      # Deploy databases and configs
      - name: Deploy Backend Infrastructure
        run: |
          echo "Deploying backend infrastructure..."
          kubectl apply -f k8s/configmaps.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f k8s/product-db.yaml
          kubectl apply -f k8s/order-db.yaml

      # Deploy backend services
      - name: Deploy Backend Microservices
        run: |
          echo "Deploying backend microservices..."
          kubectl apply -f k8s/product-service.yaml
          kubectl apply -f k8s/order-service.yaml
      
      # Wait for LoadBalancer IPs
      - name: Wait for Backend LoadBalancer IPs
        run: |
          echo "Waiting for LoadBalancer IPs..."
          for i in {1..60}; do
            PRODUCT_IP=$(kubectl get svc product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ORDER_IP=$(kubectl get svc order-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "Product Service IP: $PRODUCT_IP"
              echo "Order Service IP: $ORDER_IP"
              echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
              echo "ORDER_IP=$ORDER_IP" >> $GITHUB_ENV
              break
            fi
            sleep 5
          done

          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" ]]; then
            echo "Error: LoadBalancer IPs not assigned after timeout."
            exit 1
          fi

      # Capture outputs for other workflows
      - name: Capture Product Service IP
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT
      
      - name: Capture Order Service IP
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      - name: Logout from Azure
        run: az logout
        if: always()
